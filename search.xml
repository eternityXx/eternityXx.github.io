<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1+x云计算(初级)实操题</title>
      <link href="/2020/06/19/1+x%E4%BA%91%E8%AE%A1%E7%AE%97(%E5%88%9D%E7%BA%A7)%E5%AE%9E%E6%93%8D%E9%A2%98/"/>
      <url>/2020/06/19/1+x%E4%BA%91%E8%AE%A1%E7%AE%97(%E5%88%9D%E7%BA%A7)%E5%AE%9E%E6%93%8D%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="网络管理-70分"><a href="#网络管理-70分" class="headerlink" title="网络管理(70分)"></a>网络管理(70分)</h2><p>41.在eNSP中使用S5700交换机进行配置，通过一条命令划分vlan 2，vlan 3，vlan 1004，通过端口组的方式配置端口1-5为access模式，并添加至vlan2中。配置端口10为trunk模式，并放行vlan3。创建三层vlan 2，配置IP地址为：172.16.2.1/24，创建三层vlan1004，配置IP地址为：192.168.4.2/30。通过命令添加默认路由，下一跳为192.168.4.1（使用完整命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]vlan batch 2 3 1004</span><br><span class="line">[Huawei]port-group 1</span><br><span class="line">[Huawei-port-group-1]group-member GigabitEthernet 0&#x2F;0&#x2F;1 to GigabitEthernet 0&#x2F;0&#x2F;5</span><br><span class="line">[Huawei-port-group-1]port link-type access</span><br><span class="line">[Huawei-port-group-1]port default vlan 2</span><br><span class="line">[Huawei]interface GigabitEthernet 0&#x2F;0&#x2F;10</span><br><span class="line">[Huawei-GigabitEthernet0&#x2F;0&#x2F;10]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0&#x2F;0&#x2F;10]port trunk allow-pass vlan 3</span><br><span class="line">[Huawei]interface Vlanif 2</span><br><span class="line">[Huawei-Vlanif2]ip address 172.16.2.1 24</span><br><span class="line">[Huawei]interface Vlanif 1004</span><br><span class="line">[Huawei-Vlanif1004]ip address 192.168.4.2 30</span><br><span class="line">[Huawei]ip route-static 0.0.0.0 0 192.168.4.1</span><br></pre></td></tr></table></figure><h2 id="yum源管理-60分"><a href="#yum源管理-60分" class="headerlink" title="yum源管理(60分)"></a>yum源管理(60分)</h2><p>42.当前有一个centos7.2-1511.iso的镜像文件，使用这个文件配置yum源，要求将这个镜像文件挂载在/opt/cenos目录。还存在一个ftp源，IP地址为192.168.100.200，ftp共享的目录为/opt，/opt目录中存在一个iaas目录(该目录下存在一个repodata目录)请问如何配置自己的local.repo文件，使得可以使用这两个地方的软件包，安装文件。请将local.repo文件的内容以文本形式提交到答题框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos]</span><br><span class="line">name&#x3D;centos</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;opt&#x2F;centos</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">[iaas]</span><br><span class="line">name&#x3D;iaas</span><br><span class="line">baseurl&#x3D;ftp:&#x2F;&#x2F;192.168.100.200&#x2F;iaas</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="数据库管理-70分"><a href="#数据库管理-70分" class="headerlink" title="数据库管理(70分)"></a>数据库管理(70分)</h2><p>43.使用VMWare创建两台centos7的系统的虚拟机，安装数据库服务，并将两台数据库配置为主从数据库模式(master和slave)。配置完成后，在从节点，执行show status slave\G查看从节点的复制状态。将查看从节点服务状态的返回结果以文本形式提交的答题框。(数据库用户名root，密码000000；关于数据库的命令均使用小写)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************1.row*************************</span><br><span class="line">Slave_IO_State:Waiting for master to send event</span><br><span class="line">Master_Host:192.168.2.222 &#x2F;&#x2F;主服务器地址</span><br><span class="line">Master_User:mysync &#x2F;&#x2F;授权账户名，尽量避免使用root</span><br><span class="line">Master_Port:3306 &#x2F;&#x2F;数据库端口，部分版本没有此行</span><br><span class="line">Connect_Retry:60</span><br><span class="line">Master_Log_File:mysql-bin.000004</span><br><span class="line">Read_Master_Log_Pos:600 &#x2F;&#x2F;#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos</span><br><span class="line">Relay_Log_file:ddte-relay-bin.000003</span><br><span class="line">Relay_Log_Pos:251</span><br><span class="line">Relay_Master_Log_File:mysql-bin.000004</span><br><span class="line">Slave_IO_Running:Yes &#x2F;&#x2F;此状态必须Yes</span><br><span class="line">Slave_SQL_Running:Yes &#x2F;&#x2F;此状态必须Yes</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="Linux存储LVM管理-60分"><a href="#Linux存储LVM管理-60分" class="headerlink" title="Linux存储LVM管理(60分)"></a>Linux存储LVM管理(60分)</h2><p>44.使用VMware软件和提供的CentOS-7-x86_64-DVD-1511.iso创建虚拟机，自行配置好网络并多添加一块大小为20G的硬盘，使用fdisk命令对该硬盘进行分区，要求分出三个大小为5G的分区。使用这三个分区，创建名xcloudvg的卷组。然后创建名xcloudlv的逻辑卷，大小为12G，最后用xfs文件系统对逻辑卷进行格式化并挂载到/mnt目录下。将上述所有操作命令和返回结果以文本形式提交到答题框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pvcreate &#x2F;dev&#x2F;vdb1 &#x2F;dev&#x2F;vdb2 &#x2F;dev&#x2F;vdb3</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb1&quot; successfully created</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb2&quot; successfully created</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb3&quot; successfully created</span><br><span class="line">[root@localhost ~]# vgcreate xcloudvg &#x2F;dev&#x2F;vdb[1-3]</span><br><span class="line">Volume group &quot;xcouldvg&quot; successfully created</span><br><span class="line">[root@localhost ~]# lvcreate -L +12G -n xcloudvg xcloudlv</span><br><span class="line">Logical volume &quot;xcloudlv&quot; created.</span><br><span class="line">[root@localhost ~]# mkfs.xfs &#x2F;dev&#x2F;mapper&#x2F;xcloudvg-xcloudlv</span><br><span class="line">[root@localhost ~]# mount &#x2F;dev&#x2F;mapper&#x2F; xcouldvg-xcloudlv &#x2F;mnt&#x2F;</span><br></pre></td></tr></table></figure><h2 id="OpenStack管理-80分"><a href="#OpenStack管理-80分" class="headerlink" title="OpenStack管理(80分)"></a>OpenStack管理(80分)</h2><p>45.使用VMWare创建两台CentOS7.2的操作系统，自行配置网络与IP，使用提供的软件包，安装OpenStack平台。完成安装后，使用curl命令查询<a href="http://192.168.100.10/dashboard/auth/login/。将curl命令的查询结果以文本形式提交到答题框。" target="_blank" rel="noopener">http://192.168.100.10/dashboard/auth/login/。将curl命令的查询结果以文本形式提交到答题框。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# curl http:&#x2F;&#x2F;192.168.100.10&#x2F;dashboard&#x2F;auth&#x2F;login&#x2F;Login-XianDian Dashboard</span><br><span class="line">云计算基础架构服务平台</span><br></pre></td></tr></table></figure><h2 id="Docker管理-80分"><a href="#Docker管理-80分" class="headerlink" title="Docker管理(80分)"></a>Docker管理(80分)</h2><p>46.假设当前存在docker镜像mysql:latest，将该镜像上传至本地，然后将该镜像推送至本地仓库(假设仓库地址为192.168.100.100:5000)，从私有仓库中拉取mariadb:v10.3.18镜像。运行msyql镜像，要求将内部3306端口映射到外部的13306端口，提供交互接口，后台运行，容器名为xmysql。最后将mysql镜像和创建的容器删除。依次提交操作命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker load -i &lt; mysql:latest</span><br><span class="line"># docker push 192.168.100.100:5000&#x2F;mysql:latest</span><br><span class="line"># docker pull mariadb:v10.3.18</span><br><span class="line"># docker run -name xmysql -itd -p 13306:3306 mysql:latest &#x2F;bin&#x2F;bash</span><br><span class="line"># docker rmi mysql:latest</span><br><span class="line"># docker rm -f xmysql</span><br></pre></td></tr></table></figure><h2 id="MariaDB管理-70-0分"><a href="#MariaDB管理-70-0分" class="headerlink" title="MariaDB管理(70.0分)"></a>MariaDB管理(70.0分)</h2><p>使用VMware软件和提供的CentOS-7-x86_64-DVD-1511.iso创建虚拟机，自行配置好网络和YUM源，安装mariadb数据 库，安装完毕后登录数据库，查询当前系统的时间和用户。依次将操作命令和返回结果以文本形式提交到答题框。（数 据库用户名root，密码000000；关于数据库的命令均使用小写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[MariaDB [(none)]&gt; select sysdate();</span><br><span class="line">+---------------------+</span><br><span class="line">| sysdate() |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2018-01-17 09:28:07 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">MariaDB [(none)]&gt; select user();</span><br><span class="line">+----------------+</span><br><span class="line">| user() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="Linux存储LVM管理-80-0分"><a href="#Linux存储LVM管理-80-0分" class="headerlink" title="Linux存储LVM管理(80.0分)"></a>Linux存储LVM管理(80.0分)</h2><p>使用VMware软件和提供的CentOS-7-x86_64-DVD-1511.iso创建虚拟机，自行配置好网络并多添加一块大小为20G的硬 盘，使用fdisk命令对该硬盘进形分区，要求分出三个大小为5G的分区。使用这三个分区，创建名xcloudvg的卷组。然 后创建名xcloudlv的逻辑卷，大小为12G，最后用xfs文件系统对逻辑卷进行格式化并挂载到/mnt目录下。将上述所有操 作命令和返回结果以文本形式提交到答题框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pvcreate &#x2F;dev&#x2F;vdb1 &#x2F;dev&#x2F;vdb2 &#x2F;dev&#x2F;vdb3</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb1&quot; successfully created</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb2&quot; successfully created</span><br><span class="line">Physical volume &quot;&#x2F;dev&#x2F;vdb2&quot; successfully created</span><br><span class="line">[root@localhost ~]# vgcreate xcloudvg &#x2F;dev&#x2F;vdb[1-3]</span><br><span class="line">Volume group &quot;xcloudvg&quot; successfully created</span><br><span class="line">[root@localhost ~]# lvcreate -L +12G –n xcloudvg xcloudlv</span><br><span class="line">Logical volume &quot;xcloudlv&quot; created.</span><br><span class="line">[root@localhost ~]# mkfs.xfs &#x2F;dev&#x2F;mapper&#x2F;xcloudvg-xcloudlv</span><br><span class="line">[root@localhost ~]# mount &#x2F;dev&#x2F;mapper&#x2F; xcloudvg-xcloudlv &#x2F;mnt&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Keystone管理-60分"><a href="#Keystone管理-60分" class="headerlink" title="Keystone管理(60分)"></a>Keystone管理(60分)</h2><p>使用提供的“all-in-one”虚拟机，创建用户testuser，密码为xiandian，将testuser用户分配给admin项目，赋予用户 admin的权限。依次将操作命令和查询结果以文本形式提交到答题框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@xiandian~]# source &#x2F;etc&#x2F;keystone&#x2F;admin-openrc.sh</span><br><span class="line">[root@xiandian~]# openstack user create --domain demo --password xiandian testuser</span><br><span class="line">+-----------+----------------------------------+</span><br><span class="line">| Field     | Value                           |</span><br><span class="line">+-----------+----------------------------------+</span><br><span class="line">| domain_id | 5a486c51bc8e4dffa4a181f6c54e0938 |</span><br><span class="line">| enabled   | True                             |</span><br><span class="line">| id       | ec6d67cdb3ac4b3ca827587c14be0a3e |</span><br><span class="line">| name     | testuser                         |</span><br><span class="line">+-----------+----------------------------------+</span><br><span class="line">[root@xiandian ~]# openstack role add --project admin --user testuser admin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf快速入门</title>
      <link href="/2020/06/05/Thymeleaf%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/05/Thymeleaf%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Thymeleaf快速入门"><a href="#Thymeleaf快速入门" class="headerlink" title="Thymeleaf快速入门"></a>Thymeleaf快速入门</h2><h3 id="什么是Thymeleaf？"><a href="#什么是Thymeleaf？" class="headerlink" title="什么是Thymeleaf？"></a>什么是Thymeleaf？</h3><p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><h3 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h3><p>编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">all</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">this</span>.userService.queryAll();</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">    <span class="comment">// 返回模板名称（就是classpath:/templates/目录下的html文件名）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入启动器"><a href="#引入启动器" class="headerlink" title="引入启动器"></a>引入启动器</h3><p>直接引入启动器：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot会自动为Thymeleaf注册一个视图解析器</p><p>与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置</p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p><p>一般我们无需进行修改，默认即可。</p><h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><p>编写html模板，渲染模型中的数据：</p><p>注意，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        table &#123;border-collapse: collapse; font-size: <span class="number">14</span>px; width: <span class="number">80</span>%; margin: auto&#125;</span><br><span class="line">        table, th, td &#123;border: <span class="number">1</span>px solid darkslategray;padding: <span class="number">10</span>px&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">    &lt;span style="color: darkslategray; font-size: 30px"&gt;欢迎光临！&lt;/span&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;生日&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;备注&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr th:each=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.id&#125;"&gt;1&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.name&#125;"&gt;张三&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.userName&#125;"&gt;zhangsan&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.age&#125;"&gt;20&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.sex&#125; == 1 ? '男': '女'"&gt;男&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;#dates.format(user.birthday, 'yyyy-MM-dd')&#125;"&gt;1980-02-30&lt;/td&gt;</span><br><span class="line">            &lt;td th:text="$&#123;user.note&#125;"&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="模板缓存"><a href="#模板缓存" class="headerlink" title="模板缓存"></a>模板缓存</h3><p>Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 开发阶段关闭thymeleaf的模板缓存</span><br><span class="line">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p> 在Idea中，我们需要在修改页面后按快捷键：<code>Ctrl + Shift + F9</code> 对项目进行rebuild才可以。</p><p> eclipse中没有测试过。</p><p>我们可以修改页面，测试一下。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="/2020/05/21/springBoot/"/>
      <url>/2020/05/21/springBoot/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要学习SpringBoot"><a href="#为什么要学习SpringBoot" class="headerlink" title="为什么要学习SpringBoot"></a>为什么要学习SpringBoot</h2><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p><hr><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><p>SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis<a href="https://github.com/mybatis/spring-boot-starter" target="_blank" rel="noopener">官网</a>自己实现了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>配置，基本没有需要配置的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mybatis 别名扫描</span><br><span class="line">mybatis.type-aliases-package&#x3D;com.heima.pojo</span><br><span class="line"># mapper.xml文件位置,如果没有映射文件，请注释掉</span><br><span class="line">mybatis.mapper-locations&#x3D;classpath:mappers&#x2F;*.xml</span><br></pre></td></tr></table></figure><p>需要注意，这里没有配置mapper接口扫描包，因此我们需要给每一个Mapper接口添加<code>@Mapper</code>注解，才能被识别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用mapper"><a href="#通用mapper" class="headerlink" title="通用mapper"></a>通用mapper</h3><p>通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通用mapper --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>不需要做任何配置就可以使用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合jdbc和事务"><a href="#整合jdbc和事务" class="headerlink" title="整合jdbc和事务"></a>整合jdbc和事务</h2><p>spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？</p><p>答案是不需要处理，我们只要找到SpringBoot提供的启动器即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>至于事务，SpringBoot中通过注解来控制。就是我们熟知的<code>@Transactional</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    public User queryById(Long id)&#123;</span><br><span class="line">        return this.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional</span><br><span class="line">    public void deleteById(Long id)&#123;</span><br><span class="line">        this.userMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合连接池"><a href="#整合连接池" class="headerlink" title="整合连接池"></a>整合连接池</h2><p>其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池</p><p>因此，我们只需要指定连接池参数即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 连接四大参数</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;heima</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123</span><br><span class="line"># 可省略，SpringBoot自动推断</span><br><span class="line">spring.datasource.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.idle-timeout&#x3D;60000</span><br><span class="line">spring.datasource.hikari.maximum-pool-size&#x3D;30</span><br><span class="line">spring.datasource.hikari.minimum-idle&#x3D;10</span><br></pre></td></tr></table></figure><p>当然，如果你更喜欢Druid连接池，也可以使用Druid官方提供的启动器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Druid连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>而连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#初始化连接数</span><br><span class="line">spring.datasource.druid.initial-size&#x3D;1</span><br><span class="line">#最小空闲连接</span><br><span class="line">spring.datasource.druid.min-idle&#x3D;1</span><br><span class="line">#最大活动连接</span><br><span class="line">spring.datasource.druid.max-active&#x3D;20</span><br><span class="line">#获取连接时测试是否可用</span><br><span class="line">spring.datasource.druid.test-on-borrow&#x3D;true</span><br><span class="line">#监控页面启动</span><br><span class="line">spring.datasource.druid.stat-view-servlet.allow&#x3D;true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加分类及标签</title>
      <link href="/2020/04/24/test/"/>
      <url>/2020/04/24/test/</url>
      
        <content type="html"><![CDATA[<p>下文描述的操作均在主题butterfly上应用。</p><p>整个过程<strong>分类</strong>与<strong>标签</strong>极其相似，只需将对应的categories换成tags即可</p><h2 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h2><p>新建一个页面命名为<code>categories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories#tags</span><br></pre></td></tr></table></figure><h2 id="编辑页面"><a href="#编辑页面" class="headerlink" title="编辑页面"></a>编辑页面</h2><p>编辑新建的页面<code>source/categories/index.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-04-25 22:34:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-04-25 22:34:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="编辑菜单"><a href="#编辑菜单" class="headerlink" title="编辑菜单"></a>编辑菜单</h2><p>在菜单中增加链接，编辑主题下的<code>_config.yml</code>， 将<code>menu</code>中的<code>categories: /categories</code>注释去掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br></pre></td></tr></table></figure><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>在文章中添加分类</p><p>在文章的头中增加<code>categories</code>描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo 添加标签和分类</span><br><span class="line">date: 2018-04-27 23:00:34</span><br><span class="line">categories:</span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- linux</span><br></pre></td></tr></table></figure><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>在配置中更新别名</p><p>其中<code>:</code> 以前的是正式的名称，以后的是访问的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">category_map:</span><br><span class="line">        hexo:hexo</span><br><span class="line">        ubuntu:ubuntu</span><br><span class="line">        computer vision: computer-vision</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tag_map:</span><br><span class="line">        linux:linux</span><br><span class="line">        ubuntu:ubuntu</span><br><span class="line">        vim:vim</span><br><span class="line">        tmux:tmux</span><br><span class="line">        hexo:hexo</span><br><span class="line">        yolo:yolo</span><br><span class="line">        opencv:opencv</span><br><span class="line">        computer vision:computer-vision</span><br></pre></td></tr></table></figure><h2 id="部署生效"><a href="#部署生效" class="headerlink" title="部署生效"></a>部署生效</h2><p>一定要记得先clean再生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
